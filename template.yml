AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Description: Password-Protected SFTP Server for S3 Storage. 

Parameters:
  S3BucketName:
    Type: String
    Description: specify the s3 bucket that will be used for the solution

Resources:
  # DynamoDB table to store user credentials. 
  UsersDatabase: 
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey: 
        Name: user
        Type: String
      TableName: user_credentials

  TransferUserRole:
    # IAM Role that will be assumed by the user when he logs through SFTP to AWS Transfer. 
    Description: IAM role used by Transfer to give users permission to access the s3 bucket.
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - transfer.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies: 
        - PolicyName: S3ReadWriteAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Sid: ReadWriteS3
              Action:
              - s3:ListBucket
              Effect: Allow
              Resource:
              - !Sub arn:aws:s3:::${S3BucketName}
            - Effect: Allow
              Action:
              - s3:PutObject
              - s3:GetObject
              - s3:DeleteObject
              - s3:DeleteObjectVersion
              - s3:GetObjectVersion
              Resource:
              - !Sub arn:aws:s3:::${S3BucketName}/*

  LambdaAuthenticator:
    # Function to process authentication logic.
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/
      Timeout: 5
      Runtime: python3.9
      Handler: lambda_function.lambda_handler
      Environment:
        Variables:
          IAM_ROLE: !GetAtt TransferUserRole.Arn
          USER_TABLE: user_credentials
          BUCKET: !Ref S3BucketName
      Policies:
        - DynamoDBReadPolicy:
            TableName: user_credentials

  TransferServer:
    # AWS Transfer Server
    Type: AWS::Transfer::Server
    Properties: 
      IdentityProviderType: AWS_LAMBDA
      IdentityProviderDetails: 
        Function: !GetAtt LambdaAuthenticator.Arn

  AllowTransferInvocation:
    # Lambda Permission that allows the AWS Transfer server to call the function. 
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt LambdaAuthenticator.Arn
      Action: lambda:InvokeFunction
      Principal: transfer.amazonaws.com
      SourceArn: !GetAtt TransferServer.Arn

Outputs:
  Endpoint:
    Description: "AWS Transfer Endpoint"
    Value: !Sub "${TransferServer.ServerId}.server.transfer.${AWS::Region}.amazonaws.com"